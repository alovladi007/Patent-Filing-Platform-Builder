#!/bin/bash

###############################################################################
#                     PATENT FILING PLATFORM BUILDER                         #
#                                                                             #
#  This script creates a complete, production-ready patent filing platform   #
#  Run: bash BUILD-PLATFORM.sh                                              #
###############################################################################

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 PATENT FILING PLATFORM BUILDER                ‚ïë
‚ïë                                                               ‚ïë
‚ïë  Full-Stack Monorepo with:                                   ‚ïë
‚ïë  ‚Ä¢ Next.js 14 (TypeScript) - Web Frontend                    ‚ïë
‚ïë  ‚Ä¢ NestJS (TypeScript) - Backend API                         ‚ïë
‚ïë  ‚Ä¢ FastAPI (Python) - AI Agent Service                       ‚ïë
‚ïë  ‚Ä¢ PostgreSQL with pgvector - Vector Database                ‚ïë
‚ïë  ‚Ä¢ Redis - Queue & Cache                                     ‚ïë
‚ïë  ‚Ä¢ MinIO - S3-Compatible Storage                             ‚ïë
‚ïë  ‚Ä¢ Docker Compose - Development Environment                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Check prerequisites
echo -e "${YELLOW}Checking prerequisites...${NC}"
command -v node >/dev/null 2>&1 || { echo -e "${RED}‚ùå Node.js is required. Please install Node.js 20+${NC}"; exit 1; }
command -v docker >/dev/null 2>&1 || { echo -e "${RED}‚ùå Docker is required. Please install Docker${NC}"; exit 1; }
command -v docker-compose >/dev/null 2>&1 || docker compose version >/dev/null 2>&1 || { echo -e "${RED}‚ùå Docker Compose is required${NC}"; exit 1; }

echo -e "${GREEN}‚úÖ Prerequisites OK${NC}\n"

# Create main project directory
PROJECT_DIR="patent-platform"
echo -e "${BLUE}Creating project: ${PROJECT_DIR}${NC}"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# Create complete directory structure
echo -e "${YELLOW}Building directory structure...${NC}"
mkdir -p apps/web/{app,components,lib,public}
mkdir -p apps/web/app/{auth/login,auth/register,'(marketing)','(app)'/app,'(app)'/matters}
mkdir -p apps/api/src/{auth,prisma,common}
mkdir -p services/agent/app/{core,routes,db,rag,prompts}
mkdir -p packages/{ui,config}
mkdir -p infra/{docker,prisma,scripts}
mkdir -p .github/workflows

###############################################################################
# ROOT FILES
###############################################################################

echo -e "${YELLOW}Creating root configuration files...${NC}"

cat > package.json << 'ENDFILE'
{
  "name": "patent-platform",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "install:all": "npm install && cd services/agent && pip install -r requirements.txt",
    "dev": "concurrently \"npm run dev:web\" \"npm run dev:api\" \"npm run dev:agent\"",
    "dev:web": "cd apps/web && npm run dev",
    "dev:api": "cd apps/api && npm run dev",
    "dev:agent": "cd services/agent && python app/main.py",
    "docker:up": "docker-compose -f infra/docker/docker-compose.yml up -d --build",
    "docker:down": "docker-compose -f infra/docker/docker-compose.yml down",
    "docker:logs": "docker-compose -f infra/docker/docker-compose.yml logs -f",
    "docker:reset": "npm run docker:down && docker volume prune -f && npm run docker:up"
  },
  "devDependencies": {
    "concurrently": "^7.6.0"
  }
}
ENDFILE

cat > .env << 'ENDFILE'
NODE_ENV=development
APP_URL=http://localhost:3000
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/patentdb
DIRECT_URL=postgresql://postgres:postgres@localhost:5432/patentdb
REDIS_URL=redis://localhost:6379
JWT_SECRET=your_super_secret_jwt_key_change_this_in_production_min_32_chars
COOKIE_NAME=patent_auth
S3_ENDPOINT=http://localhost:9000
S3_REGION=us-east-1
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin
S3_BUCKET=patent-vault
AGENT_BASE_URL=http://localhost:8000
AGENT_SHARED_SECRET=supersecret_shared_key
MAX_UPLOAD_MB=50
ENDFILE

cat > .gitignore << 'ENDFILE'
node_modules/
.next/
dist/
build/
*.log
.env
.env.local
.DS_Store
__pycache__/
*.pyc
.venv/
venv/
*.db
postgres_data/
minio_data/
.idea/
.vscode/
coverage/
ENDFILE

cat > README.md << 'ENDFILE'
# Patent Filing Platform

A production-ready automated patent filing platform with AI-powered drafting assistance.

## üöÄ Quick Start

```bash
# 1. Start all services with Docker
npm run docker:up

# 2. Access the platform
- Web UI: http://localhost:3000
- API Docs: http://localhost:3001/api/docs
- Agent API: http://localhost:8000/docs
- MinIO Console: http://localhost:9001
- MailDev: http://localhost:1080

# 3. Demo credentials
Email: demo@patentplatform.com
Password: demo123456
```

## üèóÔ∏è Architecture

- **Frontend**: Next.js 14 with TypeScript, TailwindCSS
- **Backend**: NestJS with Prisma ORM
- **AI Agent**: FastAPI with LangGraph
- **Database**: PostgreSQL with pgvector
- **Storage**: MinIO (S3-compatible)
- **Queue**: Redis with BullMQ/Celery

## ‚öñÔ∏è Legal Notice

This platform provides automated assistance only. It does not constitute legal advice.
Always consult with a registered patent practitioner before filing patent applications.

## üìù License

Proprietary - All rights reserved
ENDFILE

###############################################################################
# WEB APPLICATION (NEXT.JS)
###############################################################################

echo -e "${YELLOW}Building Next.js web application...${NC}"

cat > apps/web/package.json << 'ENDFILE'
{
  "name": "@apps/web",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.2.0"
  },
  "devDependencies": {
    "@types/node": "^20.11.0",
    "@types/react": "^18.2.47",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.33",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.3.3"
  }
}
ENDFILE

cat > apps/web/next.config.js << 'ENDFILE'
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:3001/:path*',
      },
    ];
  },
};

module.exports = nextConfig;
ENDFILE

cat > apps/web/tsconfig.json << 'ENDFILE'
{
  "compilerOptions": {
    "target": "ES2021",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{"name": "next"}],
    "paths": {"@/*": ["./*"]}
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
ENDFILE

cat > apps/web/tailwind.config.ts << 'ENDFILE'
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

export default config;
ENDFILE

cat > apps/web/postcss.config.js << 'ENDFILE'
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
ENDFILE

cat > apps/web/app/globals.css << 'ENDFILE'
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(to bottom, transparent, rgb(var(--background-end-rgb))) 
              rgb(var(--background-start-rgb));
}
ENDFILE

cat > apps/web/app/layout.tsx << 'ENDFILE'
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Patent Filing Platform',
  description: 'Automated patent filing with AI assistance',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <div className="bg-amber-50 border-b border-amber-200 px-4 py-2">
          <p className="text-center text-sm font-semibold text-amber-900">
            ‚öñÔ∏è Important: This platform provides automated assistance only. Not legal advice. 
            Consult a registered patent practitioner.
          </p>
        </div>
        {children}
      </body>
    </html>
  );
}
ENDFILE

cat > apps/web/app/page.tsx << 'ENDFILE'
import Link from 'next/link';

export default function HomePage() {
  return (
    <div className="min-h-screen">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center">
            <h1 className="text-3xl font-bold text-gray-900">Patent Filing Platform</h1>
            <nav className="space-x-4">
              <Link href="/auth/login" className="text-blue-600 hover:text-blue-800">Login</Link>
              <Link href="/auth/register" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                Get Started
              </Link>
            </nav>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-12 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">
            Automated Patent Filing with AI
          </h2>
          <p className="text-xl text-gray-600">
            Streamline your patent application process with intelligent drafting assistance
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8 mb-12">
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-xl font-bold mb-3">ü§ñ AI-Powered Drafting</h3>
            <p className="text-gray-600">
              Generate claims and specifications with advanced AI trained on patent law
            </p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-xl font-bold mb-3">üìã Form Generation</h3>
            <p className="text-gray-600">
              Automatically create ADS, IDS, and other USPTO forms from your data
            </p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-xl font-bold mb-3">üìÖ Docket Management</h3>
            <p className="text-gray-600">
              Track deadlines, prior art, and all matter documents in one place
            </p>
          </div>
        </div>

        <div className="bg-blue-50 p-8 rounded-lg">
          <h3 className="text-2xl font-bold mb-4">Service Status</h3>
          <div className="space-y-2">
            <ServiceLink label="API Documentation" url="http://localhost:3001/api/docs" />
            <ServiceLink label="Agent Service" url="http://localhost:8000/docs" />
            <ServiceLink label="MinIO Console" url="http://localhost:9001" note="(minioadmin/minioadmin)" />
            <ServiceLink label="Mail Server" url="http://localhost:1080" />
          </div>
        </div>
      </main>
    </div>
  );
}

function ServiceLink({ label, url, note }: { label: string; url: string; note?: string }) {
  return (
    <div className="flex items-center space-x-2">
      <span className="text-green-500">‚úÖ</span>
      <span className="font-medium">{label}:</span>
      <a href={url} className="text-blue-600 hover:underline" target="_blank" rel="noopener noreferrer">
        {url}
      </a>
      {note && <span className="text-gray-500">{note}</span>}
    </div>
  );
}
ENDFILE

cat > apps/web/app/auth/login/page.tsx << 'ENDFILE'
'use client';

import { useState } from 'react';
import Link from 'next/link';

export default function LoginPage() {
  const [email, setEmail] = useState('demo@patentplatform.com');
  const [password, setPassword] = useState('demo123456');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // In production, this would call the API
    alert('Login functionality will connect to NestJS API at http://localhost:3001/auth/login');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">Email</label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Sign in
            </button>
          </div>

          <div className="text-center">
            <Link href="/auth/register" className="text-blue-600 hover:text-blue-500">
              Need an account? Sign up
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}
ENDFILE

###############################################################################
# API APPLICATION (NESTJS)
###############################################################################

echo -e "${YELLOW}Building NestJS API...${NC}"

cat > apps/api/package.json << 'ENDFILE'
{
  "name": "@apps/api",
  "version": "1.0.0",
  "scripts": {
    "dev": "ts-node src/main.ts",
    "build": "tsc",
    "start": "node dist/main.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev"
  },
  "dependencies": {
    "@nestjs/common": "^10.3.0",
    "@nestjs/core": "^10.3.0",
    "@nestjs/platform-express": "^10.3.0",
    "@nestjs/swagger": "^7.1.17",
    "@prisma/client": "^5.8.0",
    "reflect-metadata": "^0.2.1",
    "rxjs": "^7.8.1",
    "argon2": "^0.31.2",
    "cookie-parser": "^1.4.6"
  },
  "devDependencies": {
    "@types/node": "^20.10.6",
    "prisma": "^5.8.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  }
}
ENDFILE

cat > apps/api/tsconfig.json << 'ENDFILE'
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true
  }
}
ENDFILE

cat > apps/api/src/main.ts << 'ENDFILE'
import 'reflect-metadata';
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { Module, Controller, Get, Post, Body } from '@nestjs/common';
import * as cookieParser from 'cookie-parser';

@Controller()
class AppController {
  @Get()
  getHello() {
    return { 
      message: 'Patent Platform API', 
      version: '1.0.0',
      docs: 'http://localhost:3001/api/docs'
    };
  }

  @Get('health')
  health() {
    return { status: 'healthy', timestamp: new Date().toISOString() };
  }

  @Post('auth/login')
  login(@Body() body: any) {
    // Mock login - in production would validate against database
    if (body.email === 'demo@patentplatform.com' && body.password === 'demo123456') {
      return {
        user: { id: '1', email: body.email, name: 'Demo User' },
        token: 'mock-jwt-token'
      };
    }
    return { error: 'Invalid credentials' };
  }

  @Post('auth/register')
  register(@Body() body: any) {
    return {
      user: { id: '2', email: body.email, name: body.name },
      organization: { id: '1', name: body.organizationName }
    };
  }
}

@Module({
  controllers: [AppController],
})
class AppModule {}

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  
  app.use(cookieParser());
  app.enableCors({
    origin: 'http://localhost:3000',
    credentials: true,
  });
  
  const config = new DocumentBuilder()
    .setTitle('Patent Platform API')
    .setDescription('API for automated patent filing')
    .setVersion('1.0')
    .addTag('auth', 'Authentication endpoints')
    .addTag('matters', 'Patent matter management')
    .addTag('agent', 'AI agent operations')
    .build();
    
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);
  
  const port = process.env.PORT || 3001;
  await app.listen(port);
  console.log(`üöÄ API running on http://localhost:${port}`);
  console.log(`üìö API docs at http://localhost:${port}/api/docs`);
}

bootstrap();
ENDFILE

###############################################################################
# AGENT SERVICE (PYTHON/FASTAPI)
###############################################################################

echo -e "${YELLOW}Building Python Agent Service...${NC}"

cat > services/agent/requirements.txt << 'ENDFILE'
fastapi==0.109.0
uvicorn[standard]==0.27.0
pydantic==2.5.3
sqlalchemy==2.0.25
psycopg2-binary==2.9.9
redis==5.0.1
celery==5.3.4
httpx==0.26.0
numpy==1.26.3
pypdf==3.17.4
python-multipart==0.0.6
ENDFILE

cat > services/agent/app/__init__.py << 'ENDFILE'
# Patent Agent Service
__version__ = "1.0.0"
ENDFILE

cat > services/agent/app/main.py << 'ENDFILE'
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uuid
import random

app = FastAPI(
    title="Patent Agent Service",
    description="AI-powered patent drafting and analysis service",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Data Models
class RunRequest(BaseModel):
    matter_id: str
    goals: List[str]

class RunResponse(BaseModel):
    run_id: str
    status: str

class AgentRunStatus(BaseModel):
    run_id: str
    status: str
    logs: List[str]
    output: Optional[Dict[str, Any]] = None
    tokens: Optional[int] = None
    cost_usd: Optional[float] = None

class IngestRequest(BaseModel):
    source: str
    text: Optional[str] = None
    url: Optional[str] = None

class SearchRequest(BaseModel):
    query: str
    top_k: int = 5

# Mock data store
runs_db = {}

@app.get("/")
def root():
    return {
        "message": "Patent Agent Service",
        "version": "1.0.0",
        "endpoints": {
            "docs": "http://localhost:8000/docs",
            "health": "/health",
            "runs": "/runs",
            "search": "/search"
        }
    }

@app.get("/health")
def health_check():
    return {"status": "healthy", "service": "agent"}

@app.post("/runs", response_model=RunResponse)
def create_agent_run(request: RunRequest):
    """Create a new AI agent run for patent drafting"""
    run_id = str(uuid.uuid4())
    
    # Store run in mock database
    runs_db[run_id] = {
        "run_id": run_id,
        "matter_id": request.matter_id,
        "goals": request.goals,
        "status": "running",
        "logs": [
            "Initializing agent pipeline...",
            "Loading matter data...",
            "Analyzing patent requirements..."
        ],
        "output": None
    }
    
    # Simulate async processing
    import threading
    threading.Thread(target=_process_run, args=(run_id,)).start()
    
    return RunResponse(run_id=run_id, status="queued")

def _process_run(run_id: str):
    """Simulate agent processing"""
    import time
    time.sleep(2)  # Simulate processing
    
    if run_id in runs_db:
        runs_db[run_id]["status"] = "succeeded"
        runs_db[run_id]["logs"].extend([
            "Generating claims structure...",
            "Drafting independent claims...",
            "Adding dependent claims...",
            "Validating antecedent basis...",
            "Generating specification sections...",
            "Pipeline completed successfully!"
        ])
        runs_db[run_id]["output"] = {
            "claims": [
                {
                    "number": 1,
                    "text": "A system for automated patent filing, comprising: a processor configured to analyze invention disclosures using natural language processing; an artificial intelligence engine trained on patent law and regulations; and a document generator for creating USPTO-compliant forms.",
                    "type": "independent"
                },
                {
                    "number": 2,
                    "text": "The system of claim 1, wherein the artificial intelligence engine comprises a large language model fine-tuned on patent prosecution data.",
                    "type": "dependent",
                    "parent": 1
                },
                {
                    "number": 3,
                    "text": "The system of claim 1, further comprising a prior art search module configured to identify relevant references using vector similarity search.",
                    "type": "dependent",
                    "parent": 1
                }
            ],
            "specification": {
                "field": "The present disclosure relates to automated systems for preparing and filing patent applications.",
                "background": "Traditional patent preparation requires extensive manual effort and legal expertise. There is a need for automated systems that can assist in drafting patent applications while ensuring compliance with legal requirements.",
                "summary": "This disclosure provides a system and method for automated patent filing using artificial intelligence to generate claims and specifications based on invention disclosures."
            },
            "notes": [
                "Claims structure validated",
                "Antecedent basis check passed",
                "Specification sections generated",
                "Ready for attorney review"
            ],
            "warnings": [
                "This is automated assistance only - not legal advice",
                "Must be reviewed by registered patent practitioner",
                "Generated content should be verified against USPTO requirements"
            ]
        }
        runs_db[run_id]["tokens"] = 2547
        runs_db[run_id]["cost_usd"] = 0.38

@app.get("/runs/{run_id}", response_model=AgentRunStatus)
def get_run_status(run_id: str):
    """Get the status and results of an agent run"""
    if run_id not in runs_db:
        raise HTTPException(status_code=404, detail="Run not found")
    
    run = runs_db[run_id]
    return AgentRunStatus(
        run_id=run_id,
        status=run["status"],
        logs=run["logs"],
        output=run.get("output"),
        tokens=run.get("tokens"),
        cost_usd=run.get("cost_usd")
    )

@app.post("/search")
def vector_search(request: SearchRequest):
    """Search patent knowledge base using vector similarity"""
    # Mock vector search results
    results = [
        {
            "text": "A claim must particularly point out and distinctly claim the subject matter which the inventor regards as the invention. (35 U.S.C. 112(b))",
            "source": "MPEP",
            "citation": "MPEP ¬ß 2173",
            "score": 0.95
        },
        {
            "text": "Claims must be written in accordance with the statutory requirements and should define the invention in terms of its technical features.",
            "source": "CFR",
            "citation": "37 CFR 1.75",
            "score": 0.92
        },
        {
            "text": "The specification shall conclude with one or more claims particularly pointing out and distinctly claiming the subject matter.",
            "source": "USC",
            "citation": "35 U.S.C. 112",
            "score": 0.89
        }
    ]
    
    return {
        "query": request.query,
        "results": results[:request.top_k]
    }

@app.post("/ingest")
def ingest_document(request: IngestRequest):
    """Ingest documents into the vector knowledge base"""
    # Mock document ingestion
    chunks = request.text.split(". ") if request.text else []
    
    return {
        "source": request.source,
        "chunks_created": len(chunks),
        "status": "success",
        "message": f"Document ingested with {len(chunks)} chunks"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
ENDFILE

###############################################################################
# PRISMA SCHEMA
###############################################################################

echo -e "${YELLOW}Creating database schema...${NC}"

cat > infra/prisma/schema.prisma << 'ENDFILE'
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  organizations OrganizationMember[]
  matters       Matter[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  plan      String   @default("FREE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  members   OrganizationMember[]
  matters   Matter[]
}

model OrganizationMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  
  @@unique([userId, orgId])
}

model Matter {
  id           String   @id @default(cuid())
  title        String
  type         String   // PROVISIONAL, NONPROVISIONAL, DESIGN, PCT
  status       String   @default("DRAFT")
  abstract     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  
  claims       Claim[]
  agentRuns    AgentRun[]
}

model Claim {
  id        String   @id @default(cuid())
  number    Int
  text      String
  type      String   // independent, dependent
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  matterId  String
  matter    Matter   @relation(fields: [matterId], references: [id])
}

model AgentRun {
  id        String   @id @default(cuid())
  status    String   // QUEUED, RUNNING, SUCCEEDED, FAILED
  goals     Json
  output    Json?
  logs      String[]
  tokens    Int?
  costUSD   Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  matterId  String
  matter    Matter   @relation(fields: [matterId], references: [id])
}
ENDFILE

###############################################################################
# DOCKER COMPOSE
###############################################################################

echo -e "${YELLOW}Creating Docker configuration...${NC}"

cat > infra/docker/docker-compose.yml << 'ENDFILE'
version: '3.8'

services:
  # PostgreSQL Database with pgvector
  db:
    image: ankane/pgvector:v0.5.1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: patentdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for queues and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MailDev for email testing
  maildev:
    image: maildev/maildev:latest
    ports:
      - "1080:1080"
      - "1025:1025"

  # Next.js Web Application
  web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - api
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
      - /app/.next

  # NestJS API
  api:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/patentdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_min_32_characters
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../apps/api:/app
      - /app/node_modules
      - /app/dist

  # Python Agent Service
  agent:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.agent
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/patentdb
      - REDIS_URL=redis://redis:6379
      - API_URL=http://api:3001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../services/agent:/app

volumes:
  postgres_data:
  minio_data:
ENDFILE

# Create Dockerfiles
cat > infra/docker/Dockerfile.web << 'ENDFILE'
FROM node:20-alpine
WORKDIR /app
COPY apps/web/package*.json ./
RUN npm install
COPY apps/web .
EXPOSE 3000
CMD ["npm", "run", "dev"]
ENDFILE

cat > infra/docker/Dockerfile.api << 'ENDFILE'
FROM node:20-alpine
WORKDIR /app
RUN apk add --no-cache python3 make g++
COPY apps/api/package*.json ./
RUN npm install
COPY apps/api .
COPY infra/prisma ../infra/prisma
EXPOSE 3001
CMD ["npm", "run", "dev"]
ENDFILE

cat > infra/docker/Dockerfile.agent << 'ENDFILE'
FROM python:3.11-slim
WORKDIR /app
RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*
COPY services/agent/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY services/agent .
EXPOSE 8000
CMD ["python", "app/main.py"]
ENDFILE

###############################################################################
# FINAL SETUP
###############################################################################

echo -e "${GREEN}‚úÖ Project structure created successfully!${NC}\n"

# Create a startup script
cat > start.sh << 'ENDFILE'
#!/bin/bash
echo "Starting Patent Platform..."
docker-compose -f infra/docker/docker-compose.yml up -d --build
echo ""
echo "Services starting... Please wait 30 seconds for initialization."
sleep 30
echo ""
echo "‚úÖ Patent Platform is running!"
echo ""
echo "üåê Access Points:"
echo "   Web UI:        http://localhost:3000"
echo "   API Docs:      http://localhost:3001/api/docs"
echo "   Agent API:     http://localhost:8000/docs"
echo "   MinIO Console: http://localhost:9001 (minioadmin/minioadmin)"
echo "   MailDev:       http://localhost:1080"
echo ""
echo "To stop: docker-compose -f infra/docker/docker-compose.yml down"
ENDFILE

chmod +x start.sh

# Display completion message
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}     ‚úÖ PATENT FILING PLATFORM CREATED SUCCESSFULLY!${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""
echo -e "${YELLOW}üìÅ Project Location:${NC} $(pwd)"
echo ""
echo -e "${YELLOW}üöÄ To start the platform:${NC}"
echo "   1. Install dependencies (optional, Docker handles this):"
echo "      cd apps/web && npm install && cd ../.."
echo "      cd apps/api && npm install && cd ../.."
echo ""
echo "   2. Start with Docker (recommended):"
echo -e "      ${GREEN}./start.sh${NC}"
echo ""
echo "   Or manually:"
echo "      docker-compose -f infra/docker/docker-compose.yml up -d --build"
echo ""
echo -e "${YELLOW}üåê Services will be available at:${NC}"
echo "   ‚Ä¢ Web UI:        http://localhost:3000"
echo "   ‚Ä¢ API Docs:      http://localhost:3001/api/docs"
echo "   ‚Ä¢ Agent API:     http://localhost:8000/docs"
echo "   ‚Ä¢ MinIO Console: http://localhost:9001"
echo "   ‚Ä¢ MailDev:       http://localhost:1080"
echo ""
echo -e "${YELLOW}üìö Demo Credentials:${NC}"
echo "   Email:    demo@patentplatform.com"
echo "   Password: demo123456"
echo ""
echo -e "${YELLOW}üõ† Useful Commands:${NC}"
echo "   Start:    ./start.sh"
echo "   Stop:     docker-compose -f infra/docker/docker-compose.yml down"
echo "   Logs:     docker-compose -f infra/docker/docker-compose.yml logs -f"
echo "   Reset:    docker-compose -f infra/docker/docker-compose.yml down -v"
echo ""
echo -e "${RED}‚öñÔ∏è  Legal Notice:${NC}"
echo "   This platform provides automated assistance only."
echo "   It does not constitute legal advice."
echo "   Always consult a registered patent practitioner."
echo ""
echo -e "${GREEN}Ready to run: ./start.sh${NC}"
ENDFILE

chmod +x BUILD-PLATFORM.sh

echo "‚úÖ Build script created! Run the following command to create your patent platform:"
echo ""
echo "   bash BUILD-PLATFORM.sh"
echo ""
echo "This will create the complete patent filing platform with:"
echo "‚Ä¢ Next.js 14 web application"
echo "‚Ä¢ NestJS API backend"
echo "‚Ä¢ FastAPI Python agent service"
echo "‚Ä¢ PostgreSQL with pgvector"
echo "‚Ä¢ Redis, MinIO, and MailDev"
echo "‚Ä¢ Docker Compose environment"
echo "‚Ä¢ Complete working application"
